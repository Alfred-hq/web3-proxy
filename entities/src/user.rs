//! SeaORM Entity. Generated by sea-orm-codegen 0.10.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: u64,
    #[sea_orm(unique)]
    pub address: Vec<u8>,
    pub description: Option<String>,
    pub email: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::secondary_user::Entity")]
    SecondaryUser,
    #[sea_orm(has_many = "super::rpc_keys::Entity")]
    RpcKeys,
}

impl Related<super::secondary_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SecondaryUser.def()
    }
}

impl Related<super::rpc_keys::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RpcKeys.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
